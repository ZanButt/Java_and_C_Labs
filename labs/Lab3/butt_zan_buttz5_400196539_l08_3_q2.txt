#include <stdio.h>
#include <stdlib.h>
typedef struct {
int studentID;
char firstName[15];
char lastName[15];
int projectGrade1;
int projectGrade2;
float finalMark;
} student;
//INTIALIZNG THE FUNCTIONS
student **create_class_list(char *filename,int *sizePtr );
int find(int idno,student **list,int size);
void input_grades(char *filename,student **list,int size);
void compute_final_course_grades(student **list, int size);
void output_final_course_grades(char *filename, student **list, int size);
void print_list(student **list,int size);
void withdraw(int idNo, student **list, int *sizePtr);
void destroy_list(student **list, int *sizePtr);
student **create_class_list(char *filename,int *sizePtr ) {
int n,i;
FILE *input_file=fopen(filename, "r");
if(input_file == NULL)
        {
            printf("sorry File could not be opened %s\n", filename);
            exit(1);
        }
fscanf(input_file,"%d", &n );

student**p =(student**)malloc(n * (sizeof(student*)));/* intializa a pointer which points to
structure student and there it frees of n*sizeofstudent space
 */
*sizePtr = n; // sizePtr points to n which is number of students in the class
//Now we want to get

for(i=0;i<n;i++) {
    p[i] = (student*)malloc(sizeof(student));
    fscanf(input_file, "%d %s %s", &p[i]->studentID, p[i]->firstName, p[i]->lastName);
}
fclose(input_file);
return p;
}
int find(int idno,student **list,int size){
int i;
    for(i = 0; i < size; i++)
        {
            if(list[i]->studentID == idno) //*list[i].ID = idNo
            return i;
    }
    return -1;
}
void input_grades(char *filename,student **list,int size){
FILE *input_file=fopen(filename, "r");
int i,ID,g1,g2,index;
if(input_file == NULL)
        {
            printf("sorry file could not be opened %s\n", filename);
            exit(1);
        }
for(i=0;i<size;i++) {
    fscanf(input_file, "%d %d %d",&ID,&g1,&g2);
    //printf("%d %d %d",ID,g1,g2);
    index = find(ID, list, size);
                if(index != -1) //runs until everything that needs to be filled is filled (the two test grades)
                {
                    list[index]->projectGrade1 = g1; //*list[index] = prjGrade
                    list[index]->projectGrade2 = g2;
                }
}
fclose(input_file);
//printf("\n%d %d %d %d\n",list[1]->projectGrade1,list[1]->projectGrade2,list[2]->projectGrade1,list[2]->projectGrade1);
}
void compute_final_course_grades(student **list, int size)//function to compute the final course grade
{
    int i;
    for(i = 0; i < size; i++)
        {
            list[i]->finalMark = (list[i]->projectGrade1 + list[i]->projectGrade2) / 2.0;
            //printf("\n%d %d %f\n",list[i]->projectGrade1,list[i]->projectGrade2,list[i]->finalMark); //finds the position to put the final grade and puts them there.
        }
}
void output_final_course_grades(char *filename, student **list, int size){
int i;
FILE *output_file=fopen(filename, "w");
fprintf(output_file,"%d\n", size );
for(i=0;i<size;i++){
    fprintf(output_file,"%d %.2f\n",list[i]->studentID,list[i]->finalMark);
}
fclose(output_file);
}
void print_list(student **list,int size){
int i;
for(i=0;i<size;i++){
    printf("ID: %d Name: %s %s Project1 Grade: %d project2 Grade: %d Final grade: %.2f\n",list[i]->studentID,list[i]->firstName,list[i]->lastName,list[i]->projectGrade1,list[i]->projectGrade2,list[i]->finalMark);
}
}
void withdraw(int idNo, student **list, int *sizePtr) {
int i;
for(i=0;i<*sizePtr;i++){
   if(list[i]->studentID==idNo){
        free(list[i]);
        for(i=i+1;i<*sizePtr;i++) {
        list[i-1] = list[i];
        }
        *sizePtr = *sizePtr-1;
        printf("student with ID:%d was withdrawn\n",idNo);
    }
   else{
    printf("Not found\n");
    break;
   }
}
}
void destroy_list(student **list, int *sizePtr){
int i;
for(i=0;i< *sizePtr;i++){
    free(list[i]);
}
free(list);
*sizePtr = 0;
}
int main()
{   int size,i,n;
    student **list = NULL;
    char namesfile[100],gradesfile[100], fileout[100];
    printf("Enter the filename containing id's and names: ");//contains names and Ids
    scanf("%s", namesfile);
    list = create_class_list(namesfile, &size);
    printf("Enter the filename containing grades: ");//contains grades
    scanf("%s", gradesfile);
    input_grades(gradesfile, list, size);
    //BRUHHHHHH printf("%d",find(1200,list,size));
    // CHECK IF FIND WORKS
    compute_final_course_grades(list,size);
    printf("Enter the output filename where to write final grades:"); //where final grades will be written
    scanf("%s", fileout);
    output_final_course_grades(fileout, list, size);
    printf("NOW THE TOTAL STUDENT LIST WILL BE PRINTED ON SCREEN\n");
    print_list(list, size);
    //printf("Will now withdraw isaac newton from list\n");
    withdraw(1201,list,&size);
    print_list(list,size);
    printf("You will now be prompted to enter a ID\n");
    for(i=0;i<=2;i++){
    printf("Enter student id ");
    scanf("%d",&n);
    withdraw(n,list,&size);
    print_list(list, size);
    }
    destroy_list(list,&size);
    print_list(list,size);
    printf("That's all there is to it");
    return 0;
}
